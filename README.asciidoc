# Unofficial Coherence 12.2.1 Learning Image

* Coherence 12.2.1 documentation:

http://docs.oracle.com/middleware/1221/coherence/index.html

* Coherence 12.2.1 examples are documented here:

http://docs.oracle.com/middleware/1221/coherence/install/examples.htm#COHIN1050

## Image content

* Oracle Linux 7.1 
* JDK 8 (1.8.0.65)
* Coherence 12.2.1 + examples
* Weblogic 12.2.1
* jVisualVM + Coherence 12.2.1 plugin
* Maven 3.3.3

## Instructions

### Build image

. Clone this workspace: `git clone https://github.com/jens18/docker-images.git`
NOTE: You have to first set the HTTPS_PROXY variable before running this command if your network requires the use a HTTP proxy server. 
. Download JDK 8 and Weblogic / Coherence 12.2.1 packages from the locations defined in the ".download" files.
. Enable HTTP proxy in 'settings.xml' and 'Dockerfile' (see instructions in the <<http_proxy>> section of this document)
. Build the image as `cd docker-images/java8_coh12; sudo docker build -t java8_coh12 .`

### Accounts

* root passwd: cgbu-dev
* cgbu-dev passwd: cgbu-dev

### X11 configuration for Docker containers

The Coherence examples depend on a working configuration for X11. 

. determine the DISPLAY variable value of your Docker host: `echo $DISPLAY`
. determine the Unix domain socket file name: `ls /tmp/.X11-unix`
. enable connection from all machines to the X11 server of your Docker host: `xhost +`
. replace Unix domain socket file name and DISPLAY variable value in the `docker` commands below

NOTE: The Unix domain socket file name contains the X11 server id. 

### Run Coherence REST example
. Startup Coherence REST example:  `sudo docker run -p 8080:8080 -v /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 -e DISPLAY=":0.0" -i -t java8_coh12  /bin/bash /home/cgbu-dev/run_rest_example.sh`
. Access the Coherence REST example at http://127.0.0.1:8080/application/index.html

image::images/coh_rest_app.png[]

### Run Coherence federated caching example

* Startup container:   `sudo docker run -v /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 -e DISPLAY=":0.0" -i -t java8_coh12  /bin/bash`

[source, text]
----
host: $ xhost +
container default terminal: xterm& # launch 4 xterm's (name: xterm[1-4])
container default terminal: jconsole&
container xterm 1: cd ~/opt/wlcoh_12.2.1/coherence/examples/java; bin/run-cache-server federation ClusterA # datagrid A
container xterm 2: cd ~/opt/wlcoh_12.2.1/coherence/examples/java; bin/run-cache-server federation ClusterB # datagrid B
container xterm 3: cd ~/opt/wlcoh_12.2.1/coherence/examples/java; bin/run federation ClusterA # UI for datagrid A
container xterm 4: cd ~/opt/wlcoh_12.2.1/coherence/examples/java; bin/run federation ClusterB # UI for datagrid B
----

image::images/coh_federated_caching.png[]

### Run Coherence

* Start default Coherence datagrid with 2 nodes
* One node runs the interactive Coherence console

* Startup container:   `sudo docker run -v /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 -e DISPLAY=":0.0" -i -t java8_coh12  /bin/bash`

[source, text]
----
host: $ xhost +
container default terminal: xterm& # to launch the first Coherence node (name: xterm1)
container default terminal: xterm& # to launch the second Coherence node (name: xterm2)
container default terminal: jconsole&
container xterm 1: cd ~/opt/wlcoh_12.2.1/coherence/bin; ./cache-server.sh
container xterm 2: cd ~/opt/wlcoh_12.2.1/coherence/bin; ./coherence.sh
container xterm 2: cache test
container xterm 2: put key1 jens
container xterm 2: get key1
----

### HTTP proxy configuration
[[http_proxy]]

The following configuration files have to be changed if your environment requires the use of a HTTP proxy:

Note: HTTP proxy settings are by default commented out. Search for the string "www-proxy.us.oracle.com".

. Host Docker service: 
.. Ubuntu: /etc/default/docker (requires restart of Docker service: `service docker restart`)
.. OL6: /etc/sysconfig/docker (requires restart of Docker service: `service docker restart`)
. Container Maven: settings.xml (part of the java8_coh12 Git project)
. Container OL7 Yum: Dockerfile (part of java8_coh12 Git project)
. Container Curl: Dockerfile (part of java8_coh12 Git project)



